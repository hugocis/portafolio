// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String? // For credential authentication
  bio           String?
  website       String?
  location      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  portfolio Portfolio?
  blobs     Blob[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String   @unique
  title     String
  subtitle  String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodes Node[]
}

model Node {
  id          String   @id @default(cuid())
  portfolioId String
  parentId    String?
  title       String
  description String?
  content     String?  @db.Text
  type        NodeType
  order       Int      @default(0)
  isVisible   Boolean  @default(true)

  // Project specific fields
  projectUrl String?
  githubUrl  String?
  demoUrl    String?
  images     String[] // Array of image URLs
  tags       String[] // Array of tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  parent    Node?     @relation("NodeHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Node[]    @relation("NodeHierarchy")

  @@index([portfolioId, parentId])
  @@index([order])
}

enum NodeType {
  CATEGORY
  LANGUAGE
  PROJECT
  DOCUMENTATION
  SKILL
  EXPERIENCE
  EDUCATION
}

model Blob {
  id        String   @id @default(cuid())
  userId    String
  key       String   @unique // Unique key for blob storage
  url       String   // Public URL
  filename  String   // Original filename
  size      Int      // File size in bytes
  mimeType  String   // MIME type (image/png, application/pdf, etc.)
  category  String?  // avatar, document, project-image, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
}
