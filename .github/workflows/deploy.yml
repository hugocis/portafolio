name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: 🌐 Deploy Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
          
      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: 🚀 Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP || 'herokku.duckdns.org' }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 7122
          timeout: 600s
          command_timeout: 1800s
          script: |
            set -e
            
            echo "🏠 $(whoami)@$(hostname)"
            
            # Crear o actualizar directorio del proyecto
            PROJECT_DIR="portafolios"
            [ ! -d "$PROJECT_DIR" ] && mkdir -p "$PROJECT_DIR" && cd "$PROJECT_DIR" && git clone https://github.com/${{ github.repository }}.git . || cd "$PROJECT_DIR"
            
            # Actualizar código
            echo "🔄 Updating code..."
            git config --global --add safe.directory $(pwd)
            git fetch origin && git reset --hard origin/main && git clean -fd || echo "⚠️ Git update had issues"
            
            # Configurar ambiente
            echo "📝 Configuring environment..."
            cat > .env << EOF
            NODE_ENV=production
            PORT=3000
            NEXTAUTH_URL=http://herokku.duckdns.org:3000
            DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@db:5432/portafolios
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=portafolios
            OAUTH_GITHUB_ID=${{ secrets.OAUTH_GITHUB_ID }}
            OAUTH_GITHUB_SECRET=${{ secrets.OAUTH_GITHUB_SECRET }}
            LOG_LEVEL=info
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            ENCRYPTION_IV=${{ secrets.ENCRYPTION_IV }}
            CRON_SECRET_TOKEN=${{ secrets.CRON_SECRET_TOKEN }}
            EOF
            
            # Detener servicios y limpiar
            echo "🛑 Stopping existing services..."
            docker compose down 2>/dev/null || true
            docker image prune -f 2>/dev/null || true
            
            # Desplegar aplicación
            echo "🚀 Deploying application..."
            export DOCKER_BUILDKIT=1
            
            if docker compose up -d --build 2>&1 | tee /tmp/deploy.log; then
              echo "✅ Build successful"
            elif [ -f "Dockerfile.stable" ]; then
              echo "⚠️ Trying with stable Dockerfile..."
              cp Dockerfile Dockerfile.backup && cp Dockerfile.stable Dockerfile
              docker compose up -d --build || exit 1
            else
              echo "❌ Deployment failed"
              docker compose logs --tail=20
              exit 1
            fi
            
            # Esperar inicialización
            echo "⏳ Waiting for services (60s)..."
            sleep 60
            
            # Verificar salud
            echo "🔍 Testing application..."
            for i in {1..6}; do
              if curl -f -m 10 http://localhost:3000/api/health 2>/dev/null; then
                echo "✅ Application is healthy"
                break
              else
                [ $i -lt 6 ] && echo "⏳ Waiting... ($i/6)" && sleep 10
              fi
            done
            
            # Verificar Caddy y certificados SSL
            echo "🔐 Checking Caddy and SSL..."
            docker compose -f docker-compose.caddy.yml logs caddy | tail -20
            
            # Información final
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🎉 Deployment Completed!"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "🌐 Access URLs:"
            echo "   • HTTPS (Caddy):       https://herokku.duckdns.org"
            echo "   • HTTP (redirects):    http://herokku.duckdns.org"
            echo ""
            echo "🔒 SSL: Let's Encrypt (auto-renewed by Caddy)"
            echo ""
            echo "📊 Container Status:"
            docker compose -f docker-compose.caddy.yml ps --format "table {{.Name}}\t{{.Status}}"
            echo ""
            echo "💡 Caddy manages SSL certificates automatically"

      - name: � Verify Cloudflare Tunnel
        id: verify_tunnel
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP || 'herokku.duckdns.org' }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 7122
          script: |
            cd portafolios
            
            echo "🔍 Verifying Cloudflare Tunnel connection..."
            sleep 5
            
            # Verificar que el contenedor esté corriendo
            if docker compose ps cloudflared | grep -q "Up"; then
              echo "✅ Cloudflared container is running"
              
              # Verificar conexión en los logs
              if docker compose logs cloudflared 2>/dev/null | grep -q "Connection.*registered\|Registered tunnel connection\|Tunnel started"; then
                echo "✅ Tunnel is connected and active"
                
                # Intentar extraer detalles del túnel
                TUNNEL_INFO=$(docker compose logs cloudflared 2>/dev/null | grep -E "connIndex|Registered tunnel" | tail -5)
                if [ -n "$TUNNEL_INFO" ]; then
                  echo "📋 Tunnel connection details:"
                  echo "$TUNNEL_INFO"
                fi
              else
                echo "⚠️ Tunnel may still be initializing"
                echo "📋 Recent logs:"
                docker compose logs --tail=10 cloudflared
              fi
            else
              echo "❌ Cloudflared container is not running"
              docker compose ps cloudflared
            fi
            
      - name: 🎉 Deployment Summary
        if: success()
        run: |
          echo "### ✅ Deployment Successful! 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🌐 Access URLs:" >> $GITHUB_STEP_SUMMARY
          echo "| Service | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| **Application** | http://herokku.duckdns.org:3000 |" >> $GITHUB_STEP_SUMMARY
          echo "| **Health Check** | http://herokku.duckdns.org:3000/api/health |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📦 Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Your portfolio is now live!**" >> $GITHUB_STEP_SUMMARY
