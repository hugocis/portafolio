name: 🚀 Deploy to Invernalia Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: 🌐 Deploy to Production Server
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        
      - name: � Test server connectivity
        run: |
          echo "🔍 Testing connectivity to server..."
          
          # Test DNS resolution
          nslookup herokku.duckdns.org || echo "⚠️ DNS resolution issue"
          
          # Test SSH port specifically
          echo "Testing SSH port 7122..."
          timeout 10s nc -z herokku.duckdns.org 7122 && echo "✅ SSH port reachable" || echo "❌ SSH port not reachable"
          
      - name: �🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: 🌍 Deploy to Invernalia Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: herokku.duckdns.org
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 7122
          timeout: 600s
          command_timeout: 1800s
          script: |
            set -e
            
            echo "🏠 Working directory: $(pwd)"
            echo "👤 User: $(whoami)"
            echo "🌐 Network connectivity test..."
            
            # Test basic connectivity
            ping -c 2 8.8.8.8 || echo "⚠️ Limited internet connectivity"
            
            # Crear directorio del proyecto si no existe
            PROJECT_DIR="portafolios"
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "📁 Creating project directory..."
              mkdir -p "$PROJECT_DIR"
              cd "$PROJECT_DIR"
              echo "📦 Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            else
              echo "📁 Entering existing project directory..."
              cd "$PROJECT_DIR"
            fi
            
            # Verificar que es un repositorio git válido
            if [ ! -d ".git" ]; then
              echo "🔧 Initializing git repository..."
              rm -rf ./* ./.* 2>/dev/null || true
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Actualizar código con reintentos
            echo "🔄 Updating code from GitHub..."
            for i in {1..3}; do
              if git fetch origin && git reset --hard origin/main; then
                echo "✅ Git update successful"
                break
              else
                echo "⚠️ Git update failed, attempt $i/3"
                sleep 5
              fi
            done
            git clean -fd
            
            # Crear archivo .env para el servidor
            echo "📝 Setting up environment configuration..."
            if [ ! -f .env ]; then
              if [ -f .env.server ]; then
                cp .env.server .env
              elif [ -f .env.example ]; then
                cp .env.example .env
              else
                touch .env
              fi
              
              # Configurar variables específicas del servidor
              echo "" >> .env
              echo "NODE_ENV=production" >> .env
              echo "NEXTAUTH_URL=http://herokku.duckdns.org:8130" >> .env
              echo "DATABASE_URL=postgresql://postgres:postgres@db:5432/portafolios" >> .env
            fi
            
            # Verificar Docker
            echo "🐳 Checking Docker..."
            docker --version || { echo "❌ Docker not installed"; exit 1; }
            docker compose version || { echo "❌ Docker Compose not available"; exit 1; }
            
            # Verificar conectividad de Docker
            echo "🔍 Testing Docker connectivity..."
            timeout 30s docker pull hello-world:latest || echo "⚠️ Docker registry connectivity issues detected"
            
            # Detener servicios existentes
            echo "🛑 Stopping existing services..."
            docker compose -f docker-compose.yml -f docker-compose.server.yml down || echo "No services to stop"
            
            # Limpiar recursos con cuidado
            echo "🧹 Cleaning up..."
            docker image prune -f || echo "Could not prune images"
            docker container prune -f || echo "Could not prune containers"
            
            # Estrategia de construcción con reintentos
            echo "🚀 Building and deploying with retry strategy..."
            
            # Intentar construcción con timeout extendido
            export DOCKER_BUILDKIT=1
            export BUILDKIT_PROGRESS=plain
            
            for attempt in {1..3}; do
              echo "🔨 Build attempt $attempt/3..."
              
              if timeout 1200s docker compose -f docker-compose.yml -f docker-compose.server.yml up -d --build; then
                echo "✅ Build and deploy successful on attempt $attempt"
                break
              else
                echo "❌ Build failed on attempt $attempt"
                if [ $attempt -lt 3 ]; then
                  echo "⏳ Waiting 30 seconds before retry..."
                  docker compose -f docker-compose.yml -f docker-compose.server.yml down || true
                  sleep 30
                else
                  echo "💡 Trying fallback strategy: using pre-built images if available..."
                  
                  # Fallback: intentar sin --build si hay imágenes previas
                  if docker images | grep -q portafolios; then
                    echo "📦 Using existing images..."
                    docker compose -f docker-compose.yml -f docker-compose.server.yml up -d
                  else
                    echo "❌ No fallback available"
                    exit 1
                  fi
                fi
              fi
            done
            
            # Esperar a que los servicios se inicien
            echo "⏳ Waiting for services to start..."
            sleep 60
            
            # Verificar estado de los servicios
            echo "✅ Final service status:"
            docker compose ps
            
            # Verificar que los contenedores están corriendo
            if ! docker compose ps | grep -q "Up"; then
              echo "❌ No containers are running. Checking logs..."
              docker compose logs --tail=20
              exit 1
            fi
            
            # Mostrar logs recientes
            echo "📋 Recent application logs:"
            docker compose logs --tail=20 app || echo "Could not fetch app logs"
            
            # Test de conectividad de la aplicación con reintentos
            echo "🔍 Testing application health..."
            
            for i in {1..6}; do
              if curl -f -m 15 http://localhost:8130/api/health 2>/dev/null; then
                echo "✅ Health check successful"
                break
              elif curl -f -m 15 http://localhost:8130 2>/dev/null; then
                echo "✅ Main application responding"
                break
              else
                echo "⏳ Health check attempt $i/6 failed, retrying in 10s..."
                if [ $i -eq 6 ]; then
                  echo "⚠️ Health checks failed, but deployment may still be successful"
                  echo "🔍 Port status:"
                  netstat -tlnp | grep :8130 || echo "Port 8130 not listening"
                  echo "📋 Container logs:"
                  docker compose logs --tail=10 app
                else
                  sleep 10
                fi
              fi
            done
            
            echo "🎉 Deployment process completed!"
            echo "🌐 Application should be available at: http://herokku.duckdns.org:8130"
            echo "🔍 If not immediately available, the application may still be starting up"

  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: 🎉 Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Application URL: http://herokku.duckdns.org:8130"
          echo "🔍 Health check: http://herokku.duckdns.org:8130/api/health"
          
      - name: ❌ Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Check server connectivity and SSH credentials"
